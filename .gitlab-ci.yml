image: docker:latest
 
variables:
  REGISTRY: $CI_REGISTRY
  PROJECT_PATH: none
  DOCKER_DRIVER: overlay2
  # SELECT ONE OF INTERNAL,EXTERNAL
  CI_DEPLOY_NETWORK: EXTERNAL
  CI_DEPLOY_TAG: none
  # SELECT ONE OF public,private
  CI_PUBLISH: public
  # hotfix for https://gitlab.com/gitlab-org/gitlab-ce/issues/64959
  DOCKER_TLS_CERTDIR: ""
 
stages:
  - build
  - deploy
 
 
build-frontend:
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  services:
    - name: docker:dind
      command: ["--experimental"]
  stage: build
  script:
    - PROJECT_PATH=$(echo $CI_PROJECT_PATH | tr '[:upper:]' '[:lower:]')
    - CONTAINER_IMAGE_FRONTEND=$REGISTRY/$PROJECT_PATH
    - docker pull $CONTAINER_IMAGE_FRONTEND:latest || true
    - cd vue-frontend
    - docker image pull node:14.18.3-bullseye
    - DOCKER_BUILDKIT=0 docker build --cache-from $CONTAINER_IMAGE:latest  --tag $CONTAINER_IMAGE_FRONTEND:$CI_COMMIT_REF_SLUG --tag $CONTAINER_IMAGE_FRONTEND:latest .
    - docker push $CONTAINER_IMAGE_FRONTEND:$CI_COMMIT_REF_SLUG
    - docker push $CONTAINER_IMAGE_FRONTEND:latest
  tags:
    - topas_road


build-backend:
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  services:
    - name: docker:20-dind
      command: ["--experimental"]
  stage: build
  script:
    - PROJECT_PATH=$(echo $CI_PROJECT_PATH | tr '[:upper:]' '[:lower:]')
    - CONTAINER_IMAGE_BACKEND=$REGISTRY/${PROJECT_PATH}/backend
    - docker pull $CONTAINER_IMAGE_BACKEND:latest || true
    - cd flask-backend
    - docker image pull node:14.18.3-bullseye
    - DOCKER_BUILDKIT=0 docker build --cache-from $CONTAINER_IMAGE:latest --tag $CONTAINER_IMAGE_BACKEND:$CI_COMMIT_REF_SLUG --tag $CONTAINER_IMAGE_BACKEND:latest .
    - docker push $CONTAINER_IMAGE_BACKEND:$CI_COMMIT_REF_SLUG
    - docker push $CONTAINER_IMAGE_BACKEND:latest
  tags:
    - topas_road



 
deploy-to-swarm-production:
  stage: deploy
  image: kroniak/ssh-client:3.6
  script:
    ## Set CI_DEPLOY_NETWORK variable based on CI_COMMIT_REF_SLUG and CI_PUBLISH
    - CI_DEPLOY_NETWORK=$(if [ $CI_COMMIT_REF_SLUG != "master" ] || [ $CI_PUBLISH == "private" ]; then echo "INTERNAL"; else echo $CI_DEPLOY_NETWORK; fi)
    #$ Onlz set CI_PUBLISH to public if CI_DEPLOY_NETWORK was set to EXTERNAL
    - CI_PUBLISH=$(if [ $CI_DEPLOY_NETWORK == "INTERNAL" ]; then echo "private"; else echo $CI_PUBLISH; fi)
    - CI_DEPLOY_TAG=$(echo $CI_DEPLOY_NETWORK | tr '[:upper:]' '[:lower:]')
    - CI_PROJECT_NAMESPACE=$(echo $CI_PROJECT_NAMESPACE | tr '[:upper:]' '[:lower:]')
    - CI_PROJECT_NAME=$(echo $CI_PROJECT_NAME | tr '[:upper:]' '[:lower:]')
    ## Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # instruct ssh to send CI_* environment variables over ssh. AcceptEnv needs to be set on HOST!!!
    - echo "SendEnv LANG CI_*" >> /etc/ssh/ssh_config
    # log into Docker registry
    - ssh deployer@$SSH_DEPLOY_HOST "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    # generate path for compose file
    - COMPOSE_PATH=/home/deployer/$CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG/

    # generate directory to copy files to
    - ssh deployer@$SSH_DEPLOY_HOST "mkdir -p $COMPOSE_PATH"
    # copy necessary files to host (e.g. docker-compose.yml)

    - scp docker-compose.yml deployer@$SSH_DEPLOY_HOST:$COMPOSE_PATH
    # start new container
    - ssh -o SendEnv=CI_* deployer@$SSH_DEPLOY_HOST "cd $COMPOSE_PATH && CI_REGISTRY=$CI_REGISTRY CI_PROJECT_NAMESPACE=$CI_PROJECT_NAMESPACE CI_PROJECT_NAME=$CI_PROJECT_NAME CI_COMMIT_REF_SLUG=$CI_COMMIT_REF_SLUG CI_DEPLOY_NETWORK=$CI_DEPLOY_NETWORK CI_PUBLISH=$CI_PUBLISH CI_DEPLOY_TAG=$CI_DEPLOY_TAG CI_PASSWORD=$CI_PASSWORD CI_CONFIG_FILE_PATH_PRODUCTION=$CI_CONFIG_FILE_PATH_PRODUCTION CI_VOLUME_MOUNT_PATH=$CI_VOLUME_MOUNT_PATH docker stack deploy --with-registry-auth --compose-file docker-compose.yml  $CI_COMMIT_REF_SLUG"
  only:
    - master
  tags:
    - topas_road




deploy-to-swarm-staging-frontend:
  stage: deploy
  resource_group: team
  image: kroniak/ssh-client:3.6
  script:
    ## Set CI_DEPLOY_NETWORK variable based on CI_COMMIT_REF_SLUG and CI_PUBLISH
    - CI_DEPLOY_NETWORK=$(echo "INTERNAL")
    #$ Onlz set CI_PUBLISH to public if CI_DEPLOY_NETWORK was set to EXTERNAL
    - CI_PUBLISH=$(echo "private")
    - CI_DEPLOY_TAG=$(echo $CI_DEPLOY_NETWORK | tr '[:upper:]' '[:lower:]')
    - CI_PROJECT_NAMESPACE=$(echo $CI_PROJECT_NAMESPACE | tr '[:upper:]' '[:lower:]')
    - CI_PROJECT_NAME=$(echo $CI_PROJECT_NAME | tr '[:upper:]' '[:lower:]')
    ## Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$SSH_PRIVATE_KEY_INTERNAL" | tr -d '\r' | ssh-add - > /dev/null
    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo $SSH_DEPLOY_HOST_INTERNAL
    - echo $CI_REGISTRY_USER
    - echo $CI_REGISTRY_PASSWORD
    - echo $CI_REGISTRY
    - echo "$SSH_KNOWN_HOSTS_INTERNAL" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # instruct ssh to send CI_* environment variables over ssh. AcceptEnv needs to be set on HOST!!!
    - echo "SendEnv LANG CI_*" >> /etc/ssh/ssh_config
    # log into Docker registry
    - ssh deployer@$SSH_DEPLOY_HOST_INTERNAL "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    # generate path for compose file
    - COMPOSE_PATH=/home/deployer/$CI_PROJECT_NAME/
    # generate directory to copy files to
    - echo $NODE_ENV
    - echo NODE_ENV=$NODE_ENV > .env
    - ssh deployer@$SSH_DEPLOY_HOST_INTERNAL "mkdir -p $COMPOSE_PATH"
    - scp -r .env deployer@$SSH_DEPLOY_HOST_INTERNAL:$COMPOSE_PATH
    - scp docker-compose-frontend.dev.yml deployer@$SSH_DEPLOY_HOST_INTERNAL:$COMPOSE_PATH
    - scp -r vue-frontend deployer@$SSH_DEPLOY_HOST_INTERNAL:$COMPOSE_PATH
    - ssh -o SendEnv=CI_* deployer@$SSH_DEPLOY_HOST_INTERNAL "cd $COMPOSE_PATH && CI_REGISTRY=$CI_REGISTRY CI_PROJECT_NAMESPACE=$CI_PROJECT_NAMESPACE CI_PROJECT_NAME=$CI_PROJECT_NAME CI_COMMIT_REF_SLUG=$CI_COMMIT_REF_SLUG CI_DEPLOY_NETWORK=$CI_DEPLOY_NETWORK CI_PUBLISH=$CI_PUBLISH CI_DEPLOY_TAG=$CI_DEPLOY_TAG CI_VOLUME_MOUNT_PATH=$CI_VOLUME_MOUNT_PATH docker-compose -f docker-compose-frontend.dev.yml up  --build  --remove-orphans -d"

  only:
    - master-internal
  tags:
    - topas_road

deploy-to-swarm-staging-backend:
  stage: deploy
  resource_group: team
  image: kroniak/ssh-client:3.6
  script:
    - CI_PUBLISH=$(echo "private")
    - CI_DEPLOY_TAG=$(echo $CI_DEPLOY_NETWORK | tr '[:upper:]' '[:lower:]')
    - CI_PROJECT_NAMESPACE=$(echo $CI_PROJECT_NAMESPACE | tr '[:upper:]' '[:lower:]')
    - CI_PROJECT_NAME=$(echo $CI_PROJECT_NAME | tr '[:upper:]' '[:lower:]')
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_INTERNAL" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo $SSH_DEPLOY_HOST_INTERNAL
    - echo $CI_REGISTRY_USER
    - echo $CI_REGISTRY_PASSWORD
    - echo $CI_REGISTRY
    - echo "$SSH_KNOWN_HOSTS_INTERNAL" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - echo "SendEnv LANG CI_*" >> /etc/ssh/ssh_config
    - ssh deployer@$SSH_DEPLOY_HOST_INTERNAL "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - COMPOSE_PATH=/home/deployer/$CI_PROJECT_NAME/
    - echo $CONFIG_FILE_PATH_DEVELOP
    - echo CONFIG_FILE_PATH_DEVELOP=$CONFIG_FILE_PATH_DEVELOP>.env   
    - ssh deployer@$SSH_DEPLOY_HOST_INTERNAL "mkdir -p $COMPOSE_PATH"
    - scp -r .env deployer@$SSH_DEPLOY_HOST_INTERNAL:$COMPOSE_PATH
    - scp docker-compose-backend.dev.yml deployer@$SSH_DEPLOY_HOST_INTERNAL:$COMPOSE_PATH
    - scp -r flask-backend deployer@$SSH_DEPLOY_HOST_INTERNAL:$COMPOSE_PATH
    - ssh -o SendEnv=CI_* deployer@$SSH_DEPLOY_HOST_INTERNAL "cd $COMPOSE_PATH && CI_REGISTRY=$CI_REGISTRY CI_PROJECT_NAMESPACE=$CI_PROJECT_NAMESPACE CI_PROJECT_NAME=$CI_PROJECT_NAME CI_COMMIT_REF_SLUG=$CI_COMMIT_REF_SLUG CI_DEPLOY_NETWORK=$CI_DEPLOY_NETWORK CI_PUBLISH=$CI_PUBLISH CI_DEPLOY_TAG=$CI_DEPLOY_TAG  docker-compose -f docker-compose-backend.dev.yml up  --build  -d"
  only:
    - master-internal
  tags:
    - topas_road
