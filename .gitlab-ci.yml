image: docker:latest
 
variables:
  REGISTRY: $CI_REGISTRY
  PROJECT_PATH: none
  DOCKER_DRIVER: overlay2
  # SELECT ONE OF INTERNAL,EXTERNAL
  CI_DEPLOY_NETWORK: EXTERNAL
  CI_DEPLOY_TAG: none
  # SELECT ONE OF public,private
  CI_PUBLISH: public
  # hotfix for https://gitlab.com/gitlab-org/gitlab-ce/issues/64959
  DOCKER_TLS_CERTDIR: ""
 
stages:
  - build
  - deploy

.parallel:
  parallel:
    matrix:
      - SSH_DEPLOY_HOST_MATRIX: $SSH_DEPLOY_HOST
        SSH_PRIVATE_KEY_MATRIX: $SSH_PRIVATE_KEY
        SSH_KNOWN_HOSTS_MATRIX: $SSH_KNOWN_HOSTS
        CI_VOLUME_MOUNT_PATH_MATRIX: $CI_VOLUME_MOUNT_PATH
        CI_CONFIG_FILE_PATH: $CI_CONFIG_FILE_PATH_PRODUCTION
        CI_BACKEND_PORT: "3832"
        CI_FRONTEND_PORT: "3834"
        DOCKER_COMPOSE_FILE: docker-compose.yml
        BRANCH: master
      - SSH_DEPLOY_HOST_MATRIX: $SSH_DEPLOY_HOST_INTERNAL
        SSH_PRIVATE_KEY_MATRIX: $SSH_PRIVATE_KEY_INTERNAL
        SSH_KNOWN_HOSTS_MATRIX: $SSH_KNOWN_HOSTS_INTERNAL
        CI_VOLUME_MOUNT_PATH_MATRIX: $CI_VOLUME_MOUNT_PATH_INTERNAL
        CI_CONFIG_FILE_PATH: $CI_CONFIG_FILE_PATH_DEVELOP
        DOCKER_COMPOSE_FILE: docker-compose.dev.yml
        CI_BACKEND_PORT: "3832"
        CI_FRONTEND_PORT: "3834"
        BRANCH: master-internal
      - SSH_DEPLOY_HOST_MATRIX: $SSH_DEPLOY_HOST_TEST
        SSH_PRIVATE_KEY_MATRIX: $SSH_PRIVATE_KEY_TEST
        SSH_KNOWN_HOSTS_MATRIX: $SSH_KNOWN_HOSTS_TEST
        CI_VOLUME_MOUNT_PATH_MATRIX: $CI_VOLUME_MOUNT_PATH_INTERNAL
        CI_CONFIG_FILE_PATH: $CI_CONFIG_FILE_PATH_DEVELOP
        DOCKER_COMPOSE_FILE: docker-compose.dev.yml
        CI_BACKEND_PORT: "3832"
        CI_FRONTEND_PORT: "3834"
        BRANCH: master-test
      - SSH_DEPLOY_HOST_MATRIX: $SSH_DEPLOY_HOST_INTERNAL
        SSH_PRIVATE_KEY_MATRIX: $SSH_PRIVATE_KEY_INTERNAL
        SSH_KNOWN_HOSTS_MATRIX: $SSH_KNOWN_HOSTS_INTERNAL
        CI_VOLUME_MOUNT_PATH_MATRIX: $CI_VOLUME_MOUNT_PATH_INTERNAL
        CI_CONFIG_FILE_PATH: $CI_CONFIG_FILE_PATH_YODA
        DOCKER_COMPOSE_FILE: docker-compose.dev.yml
        CI_BACKEND_PORT: "3836"
        CI_FRONTEND_PORT: "3838"
        BRANCH: master-yoda


build-frontend:
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  services:
    - name: docker:dind
      command: ["--experimental"]
  stage: build
  script:
    - PROJECT_PATH=$(echo $CI_PROJECT_PATH | tr '[:upper:]' '[:lower:]')
    - CONTAINER_IMAGE_FRONTEND=$REGISTRY/$PROJECT_PATH
    - NODE_ENV=$(if [ $CI_COMMIT_REF_SLUG != "master" ]; then echo "development"; else echo "production"; fi)
    - VUE_APP_API_HOST=$(if [ $NODE_ENV != "production" ]; then echo "http://${SSH_DEPLOY_HOST_MATRIX}:${CI_BACKEND_PORT}"; else echo "/master_topas-portal_backend"; fi)
    - docker pull $CONTAINER_IMAGE_FRONTEND:latest || true
    - cd vue-frontend
    - docker image pull node:14.18.3-bullseye
    - DOCKER_BUILDKIT=0 docker build --build-arg NODE_ENV=$NODE_ENV --build-arg VUE_APP_API_HOST=$VUE_APP_API_HOST --cache-from $CONTAINER_IMAGE_FRONTEND:latest --tag $CONTAINER_IMAGE_FRONTEND:$CI_COMMIT_REF_SLUG --tag $CONTAINER_IMAGE_FRONTEND:latest .
    - docker push $CONTAINER_IMAGE_FRONTEND:$CI_COMMIT_REF_SLUG
    - docker push $CONTAINER_IMAGE_FRONTEND:latest
  parallel: !reference [.parallel,parallel]
  rules:
    - if: $CI_COMMIT_REF_NAME == $BRANCH
  tags:
    - topas_road


build-backend:
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  services:
    - name: docker:20-dind
      command: ["--experimental"]
  stage: build
  script:
    - PROJECT_PATH=$(echo $CI_PROJECT_PATH | tr '[:upper:]' '[:lower:]')
    - CONTAINER_IMAGE_BACKEND=$REGISTRY/${PROJECT_PATH}/backend
    - docker pull $CONTAINER_IMAGE_BACKEND:latest || true
    - cd flask-backend
    - docker build
        --target dev
        --cache-from $CONTAINER_IMAGE_BACKEND:dev-buildcache
        --tag $CONTAINER_IMAGE_BACKEND:dev-buildcache
        --build-arg BUILDKIT_INLINE_CACHE=1
        "."
    - docker push $CONTAINER_IMAGE_BACKEND:dev-buildcache
    - docker build 
        --cache-from $CONTAINER_IMAGE_BACKEND:latest 
        --cache-from $CONTAINER_IMAGE_BACKEND:dev-buildcache
        --tag $CONTAINER_IMAGE_BACKEND:$CI_COMMIT_REF_SLUG
        --tag $CONTAINER_IMAGE_BACKEND:$CI_COMMIT_SHORT_SHA
        --tag $CONTAINER_IMAGE_BACKEND:latest 
        "."
    - docker push $CONTAINER_IMAGE_BACKEND:$CI_COMMIT_REF_SLUG
    - docker push $CONTAINER_IMAGE_BACKEND:$CI_COMMIT_SHORT_SHA
    - docker push $CONTAINER_IMAGE_BACKEND:latest
  tags:
    - topas_road



 
deploy-to-swarm:
  stage: deploy
  image: kroniak/ssh-client:3.6
  script:
    ## Set CI_DEPLOY_NETWORK variable based on CI_COMMIT_REF_SLUG and CI_PUBLISH
    - CI_DEPLOY_NETWORK=$(if [ $CI_COMMIT_REF_SLUG != "master" ] || [ $CI_PUBLISH == "private" ]; then echo "INTERNAL"; else echo $CI_DEPLOY_NETWORK; fi)
    ## Only set CI_PUBLISH to public if CI_DEPLOY_NETWORK was set to EXTERNAL
    - CI_PUBLISH=$(if [ $CI_DEPLOY_NETWORK == "INTERNAL" ]; then echo "private"; else echo $CI_PUBLISH; fi)
    - CI_DEPLOY_TAG=$(echo $CI_DEPLOY_NETWORK | tr '[:upper:]' '[:lower:]')
    - CI_PROJECT_NAMESPACE=$(echo $CI_PROJECT_NAMESPACE | tr '[:upper:]' '[:lower:]')
    - CI_PROJECT_NAME=$(echo $CI_PROJECT_NAME | tr '[:upper:]' '[:lower:]')
    ## Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$SSH_PRIVATE_KEY_MATRIX" | tr -d '\r' | ssh-add - > /dev/null
    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS_MATRIX" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # instruct ssh to send CI_* environment variables over ssh.
    # Note that "AcceptEnv CI_*" needs to be set on the HOST in /etc/ssh/sshd_config (restart the ssh service if you add this the first time)!!!
    - echo "SendEnv LANG CI_*" >> /etc/ssh/ssh_config
    # log into Docker registry
    - ssh deployer@$SSH_DEPLOY_HOST_MATRIX "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    # generate path for compose file
    - COMPOSE_PATH=/home/deployer/$CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG/
    # generate directory to copy files to
    - ssh deployer@$SSH_DEPLOY_HOST_MATRIX "mkdir -p $COMPOSE_PATH"
    # copy necessary files to host (e.g. docker-compose.yml)
    - scp $DOCKER_COMPOSE_FILE deployer@$SSH_DEPLOY_HOST_MATRIX:$COMPOSE_PATH
    # start new container
    - ssh deployer@$SSH_DEPLOY_HOST_MATRIX "cd $COMPOSE_PATH && docker stack deploy --with-registry-auth --compose-file $DOCKER_COMPOSE_FILE $CI_COMMIT_REF_SLUG"
  parallel: !reference [.parallel,parallel]
  rules:
    - if: $CI_COMMIT_REF_NAME == $BRANCH
  tags:
    - topas_road